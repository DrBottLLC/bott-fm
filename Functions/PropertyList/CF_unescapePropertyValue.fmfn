/**
 * =====================================
 * CF_unescapePropertyValue ( propertyValue )
 *
 * RETURNS:
 * 		Property Value with one level of escaping removed.
 *
 * PARAMETERS:
 * 		propertyValue: A property value to unescape
 *
 * DEPENDENCIES: None
 *
 * NOTES:
 * 		Function is recursive.
 *
 * 		Execution depth varies depending on the number of pilcrows, and uses a
 * 		b-tree style recursion. The functional limit is about 30,000 pilcrow
 * 		characters in the input.
 *
 * 		Paragraph markers (pilcrow sign) that were escaped with a backslash
 * 		have their leading slash removed. Paragraph markers are converted into
 * 		line breaks.
 *
 * HISTORY:
 *		UPDATED on 2013-08-13 by Perren Smith <perrens@drbott.net> to include
 *		MIT software license.
 * 		MODIFIED on 2007-07-25 by Chris Irvine <perrens@drbott.net> as
 * 		essentially a complete rewrite to remove character level recursion.
 * 		Also uses Char () based variables for improved readability (credit
 * 		to Perren Smith).
 * 		CREATED on 2008-05-07 by Chris Irvine <chrisi@drbott.net>.
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Dr. Bott LLC and Chris Irvine
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * =====================================
 */

Let (
	[
		~backslash = Char ( 92 );	// often found in code as "\\"
		~pilcrow = Char ( 182 );	// often found in code as "\¶"
		~linebreak = Char ( 13 );	// often found in code as "¶"
		~pilcrowCount = PatternCount ( propertyValue ; ~pilcrow ) ;
		~divideAt = Ceiling ( ~pilcrowCount / 2 ) ;
		~nthPilcrow = If ( ~pilcrowCount ;
			/* then */ Position ( propertyValue ; ~pilcrow ; 1 ; ~divideAt ) ; 
			/* else */ 0
		) ;
		~goLeft = ~divideAt > 1 ;	// we will still need to travel left
		~goRight = ~pilcrowCount > 1 ;	// we will still need to travel right
		~priorCharacter = If ( ~nthPilcrow > 1 ;
			/* then */ Middle ( propertyValue ; ~nthPilcrow - 1 ; 1 ) ;
			/* else */ ""
		)
	] ;
	Case ( 
		~nthPilcrow = 0 ;
			/* there are no pilcrow signs in our input, do not recurse, return the input */
			propertyValue ;
		~nthPilcrow = 1 ;
			/* there is a pilcrow sign in the first position, switch it for a line break and recurse for the rest of the string */
			~linebreak & CF_unescapePropertyValue ( Right ( propertyValue ; Length ( propertyValue ) - 1 ) ) ;
		~priorCharacter = ~backslash ;
			/* the character before pilcrow escapes it, drop that one prior character, keep pilcro, and recurse for the left and right half of the string */
			If ( ~goLeft ;
				/* then recurse */ CF_unescapePropertyValue ( Left ( propertyValue ; ~nthPilcrow - 2 ) ) ;
				/* else terminate */ Left ( propertyValue ; ~nthPilcrow - 2 )
			) & ~pilcrow &
			If ( ~goRight ;
				/* then recurse */ CF_unescapePropertyValue ( Right ( propertyValue ; Length ( propertyValue ) - ~nthPilcrow ) ) ;
				/* else terminate */ Right ( propertyValue ; Length ( propertyValue ) - ~nthPilcrow )
			) ;
		/* default */
			/* the prior character is something else,  switch it for a line break and recurse for the left and right half of the string */
		If ( ~goLeft ;
			/* then recurse */ CF_unescapePropertyValue ( Left ( propertyValue ; ~nthPilcrow - 1 ) ) ;
			/* else terminate */ Left ( propertyValue ; ~nthPilcrow - 1 )
		) & ~linebreak &
		If ( ~goRight ;
			/* then recurse */ CF_unescapePropertyValue ( Right ( propertyValue ; Length ( propertyValue ) - ~nthPilcrow ) ) ;
			/* else terminate */ Right ( propertyValue ; Length ( propertyValue ) - ~nthPilcrow )
		)
	)
)